// Generated by psc version 0.9.1
"use strict";
var Prelude = require("../Prelude");
var Test_QuickCheck = require("../Test.QuickCheck");
var Test_QuickCheck_Arbitrary = require("../Test.QuickCheck.Arbitrary");
var Samph_Pars = require("../Samph.Pars");
var Samph_Types = require("../Samph.Types");
var Data_String = require("../Data.String");
var Data_Tuple = require("../Data.Tuple");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Control_Monad_Eff_Random = require("../Control.Monad.Eff.Random");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Int = require("../Data.Int");
var Data_StrMap = require("../Data.StrMap");
var Data_Either = require("../Data.Either");
var Node_Encoding = require("../Node.Encoding");
var Node_FS = require("../Node.FS");
var Node_FS_Sync = require("../Node.FS.Sync");
var Text_Parsing_Parser = require("../Text.Parsing.Parser");
var Data_Show = require("../Data.Show");
var Data_Eq = require("../Data.Eq");
var Data_Ord = require("../Data.Ord");
var Data_Functor = require("../Data.Functor");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Control_Bind = require("../Control.Bind");
var Data_Foldable = require("../Data.Foldable");
var Data_Identity = require("../Data.Identity");
var Data_Semiring = require("../Data.Semiring");
var Data_Ring = require("../Data.Ring");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans");
var Positive = function (x) {
    return x;
};
var slowToBase = (function () {
    var toInt = function (v) {
        if (v === "0") {
            return 0;
        };
        if (v === "1") {
            return 1;
        };
        if (v === "2") {
            return 2;
        };
        if (v === "3") {
            return 3;
        };
        if (v === "4") {
            return 4;
        };
        if (v === "5") {
            return 5;
        };
        if (v === "6") {
            return 6;
        };
        if (v === "7") {
            return 7;
        };
        if (v === "8") {
            return 8;
        };
        if (v === "9") {
            return 9;
        };
        return 0;
    };
    return function ($24) {
        return Data_Functor.map(Data_Functor.functorArray)(toInt)(Data_String.toCharArray(Data_Show.show(Data_Show.showInt)($24)));
    };
})();
var showPos = new Data_Show.Show(function (v) {
    return Data_Show.show(Data_Show.showInt)(v);
});
var once = function (dictTestable) {
    return Test_QuickCheck["quickCheck'"](dictTestable)(1);
};
var parseExample = function (dictEq) {
    return function (dictShow) {
        return function (prs) {
            return function (res) {
                return function (str) {
                    return once(Test_QuickCheck.testableResult)(Test_QuickCheck.assertEquals(Data_Either.eqEither(Text_Parsing_Parser.eqParseError)(dictEq))(Data_Either.showEither(Text_Parsing_Parser.showParseError)(dictShow))(new Data_Either.Right(res))(Text_Parsing_Parser.runParser(str)(prs)));
                };
            };
        };
    };
};
var fromFile = function (dictEq) {
    return function (dictShow) {
        return function (loc) {
            return function (prs) {
                return function (res) {
                    return function __do() {
                        var v = Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)(loc)();
                        return parseExample(dictEq)(dictShow)(prs)(res)(v)();
                    };
                };
            };
        };
    };
};
var eqPos = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return v === v1;
    };
});
var ordPos = new Data_Ord.Ord(function () {
    return eqPos;
}, function (v) {
    return function (v1) {
        return Data_Ord.compare(Data_Ord.ordInt)(v)(v1);
    };
});
var checkUnBase = function (v) {
    return Test_QuickCheck.assertEquals(Data_Eq.eqInt)(Data_Show.showInt)(v)(Samph_Pars.unBase(Data_Foldable.foldableArray)(10)(slowToBase(v)));
};
var checkHexParse = function (v) {
    return Test_QuickCheck.assertEquals(Data_Either.eqEither(Text_Parsing_Parser.eqParseError)(Data_Eq.eqInt))(Data_Either.showEither(Text_Parsing_Parser.showParseError)(Data_Show.showInt))(new Data_Either.Right(v))(Text_Parsing_Parser.runParser(Data_Int.toStringAs(Data_Int.hexadecimal)(v))(Samph_Pars.hex(Data_Identity.monadIdentity)));
};
var abs = function (n) {
    if (n < 0) {
        return n * -1 | 0;
    };
    return n;
};
var arbPos = new Test_QuickCheck_Arbitrary.Arbitrary(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(function ($25) {
    return Positive(abs($25));
})(Test_QuickCheck_Arbitrary.arbitrary(Test_QuickCheck_Arbitrary.arbInt)));
var main = function __do() {
    Test_QuickCheck.quickCheck(Test_QuickCheck.testableFunction(arbPos)(Test_QuickCheck.testableResult))(checkUnBase)();
    Test_QuickCheck.quickCheck(Test_QuickCheck.testableFunction(arbPos)(Test_QuickCheck.testableResult))(checkHexParse)();
    parseExample(Samph_Types.eqReg)(Samph_Types.showReg)(Samph_Pars.reg(Data_Identity.monadIdentity))(Samph_Types.AL.value)("AL")();
    parseExample(Samph_Types.eqReg)(Samph_Types.showReg)(Samph_Pars.reg(Data_Identity.monadIdentity))(Samph_Types.BL.value)("BL")();
    parseExample(Samph_Types.eqReg)(Samph_Types.showReg)(Samph_Pars.reg(Data_Identity.monadIdentity))(Samph_Types.CL.value)("CL")();
    parseExample(Samph_Types.eqReg)(Samph_Types.showReg)(Samph_Pars.reg(Data_Identity.monadIdentity))(Samph_Types.DL.value)("DL")();
    parseExample(Samph_Types.eqReg)(Samph_Types.showReg)(Samph_Pars.reg(Data_Identity.monadIdentity))(Samph_Types.DL.value)("dL")();
    parseExample(Samph_Types.eqAddrLit)(Samph_Types.showAddrLit)(Samph_Pars.addrLit(Data_Identity.monadIdentity))(0)("[0]")();
    parseExample(Samph_Types.eqAddrLit)(Samph_Types.showAddrLit)(Samph_Pars.addrLit(Data_Identity.monadIdentity))(0)("[0 ]")();
    parseExample(Samph_Types.eqAddrLit)(Samph_Types.showAddrLit)(Samph_Pars.addrLit(Data_Identity.monadIdentity))(0)("[ 0]")();
    parseExample(Samph_Types.eqAddrLit)(Samph_Types.showAddrLit)(Samph_Pars.addrLit(Data_Identity.monadIdentity))(10)("[A]")();
    parseExample(Samph_Types.eqAddrReg)(Samph_Types.showAddrReg)(Samph_Pars.addrReg(Data_Identity.monadIdentity))(Samph_Types.AL.value)("[AL ]")();
    parseExample(Data_Eq.eqString)(Data_Show.showString)(Samph_Pars.instruction(Data_Identity.monadIdentity))("AL 4")("ADD AL, 4")();
    parseExample(Data_Eq.eqString)(Data_Show.showString)(Samph_Pars.instruction(Data_Identity.monadIdentity))("[AL] 4")("MUL [AL],4")();
    parseExample(Data_Eq.eqString)(Data_Show.showString)(Samph_Pars.instruction(Data_Identity.monadIdentity))("[BL] AL")("SUB [BL],AL")();
    parseExample(Data_Eq.eqString)(Data_Show.showString)(Samph_Pars.labelDecl(Data_Identity.monadIdentity))("jump")("jump :  ")();
    parseExample(Data_Eq.eqString)(Data_Show.showString)(Samph_Pars.instruction(Data_Identity.monadIdentity))("")("CLO")();
    parseExample(Data_Eq.eqString)(Data_Show.showString)(Samph_Pars.instruction(Data_Identity.monadIdentity))("Clear")("JZ Clear")();
    parseExample(Data_Eq.eqString)(Data_Show.showString)(Samph_Pars.instruction(Data_Identity.monadIdentity))("Start")("JMP Start")();
    fromFile(Data_StrMap.eqStrMap(Data_Eq.eqInt))(Data_StrMap.showStrMap(Data_Show.showInt))("test/Examples/example1")(Samph_Pars.firstPass(Data_Identity.monadIdentity))(Data_StrMap.fromFoldable(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("Start", 0), new Data_Tuple.Tuple("Here", 2), new Data_Tuple.Tuple("Clear", 8), new Data_Tuple.Tuple("Loop", 11) ]))();
    fromFile(Data_StrMap.eqStrMap(Data_Eq.eqInt))(Data_StrMap.showStrMap(Data_Show.showInt))("test/Examples/example2")(Samph_Pars.firstPass(Data_Identity.monadIdentity))(Data_StrMap.fromFoldable(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("Start", 1) ]))();
    fromFile(Data_StrMap.eqStrMap(Data_Eq.eqInt))(Data_StrMap.showStrMap(Data_Show.showInt))("test/Examples/example3")(Samph_Pars.firstPass(Data_Identity.monadIdentity))(Data_StrMap.fromFoldable(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("Foo", 5) ]))();
    fromFile(Data_StrMap.eqStrMap(Data_Eq.eqInt))(Data_StrMap.showStrMap(Data_Show.showInt))("test/Examples/example4")(Samph_Pars.firstPass(Data_Identity.monadIdentity))(Data_StrMap.fromFoldable(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("Rep", 1) ]))();
    fromFile(Data_StrMap.eqStrMap(Data_Eq.eqInt))(Data_StrMap.showStrMap(Data_Show.showInt))("test/Examples/example5")(Samph_Pars.firstPass(Data_Identity.monadIdentity))(Data_StrMap.fromFoldable(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("Rep", 1) ]))();
    fromFile(Data_StrMap.eqStrMap(Data_Eq.eqInt))(Data_StrMap.showStrMap(Data_Show.showInt))("test/Examples/example6")(Samph_Pars.firstPass(Data_Identity.monadIdentity))(Data_StrMap.fromFoldable(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("Start", 0), new Data_Tuple.Tuple("Rep", 10) ]))();
    return fromFile(Data_Eq.eqArray(Samph_Types.eqMach))(Data_Show.showArray(Samph_Types.showMach))("test/Examples/example1")(Samph_Pars.program(Data_Identity.monadIdentity))([ new Samph_Types.D0(Samph_Types.BL.value, 192), new Samph_Types.D0(Samph_Types.AL.value, 60), new Samph_Types.D4(Samph_Types.BL.value, Samph_Types.AL.value), new Samph_Types.DB(Samph_Types.AL.value, 123), new Samph_Types.C1(8), new Samph_Types.A4(Samph_Types.AL.value), new Samph_Types.A4(Samph_Types.BL.value), new Samph_Types.C0(2), new Samph_Types.D0(Samph_Types.CL.value, 64), new Samph_Types.D0(Samph_Types.AL.value, 32), new Samph_Types.D0(Samph_Types.BL.value, 192), new Samph_Types.D4(Samph_Types.BL.value, Samph_Types.AL.value), new Samph_Types.A4(Samph_Types.BL.value), new Samph_Types.A5(Samph_Types.CL.value), new Samph_Types.C2(11), new Samph_Types.C0(0) ])();
};
module.exports = {
    Positive: Positive, 
    abs: abs, 
    checkHexParse: checkHexParse, 
    checkUnBase: checkUnBase, 
    fromFile: fromFile, 
    main: main, 
    once: once, 
    parseExample: parseExample, 
    slowToBase: slowToBase, 
    showPos: showPos, 
    eqPos: eqPos, 
    ordPos: ordPos, 
    arbPos: arbPos
};
