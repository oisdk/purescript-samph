// Generated by psc version 0.9.1
"use strict";
var Text_Parsing_Parser = require("../Text.Parsing.Parser");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String");
var Data_Array = require("../Data.Array");
var Data_Traversable = require("../Data.Traversable");
var Prelude = require("../Prelude");
var Data_Maybe = require("../Data.Maybe");
var Samph_Types = require("../Samph.Types");
var Data_StrMap_ST = require("../Data.StrMap.ST");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Reader = require("../Control.Monad.Reader");
var Control_Monad_Trans = require("../Control.Monad.Trans");
var Control_Alternative = require("../Control.Alternative");
var Control_Monad_ST = require("../Control.Monad.ST");
var Data_Char_Unicode = require("../Data.Char.Unicode");
var Data_StrMap = require("../Data.StrMap");
var Text_Parsing_Parser_Token = require("../Text.Parsing.Parser.Token");
var Data_Function = require("../Data.Function");
var Data_Semiring = require("../Data.Semiring");
var Data_Foldable = require("../Data.Foldable");
var Control_Apply = require("../Control.Apply");
var Data_Functor = require("../Data.Functor");
var Data_Semigroup = require("../Data.Semigroup");
var Control_Bind = require("../Control.Bind");
var Control_Applicative = require("../Control.Applicative");
var Data_Ord = require("../Data.Ord");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class");
var Control_Alt = require("../Control.Alt");
var Data_Show = require("../Data.Show");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans");
var Data_Identity = require("../Data.Identity");
var unops = [ "INC", "DEC", "NOT", "ROL", "ROR", "SHL", "SHR", "JMP", "JZ", "JNZ", "JS", "JNS", "JO", "JNO", "CALL", "INT", "PUSH", "POP", "IN", "OUT", "ORG", "DB" ];
var unMon = function (dictMonad) {
    return function (f) {
        return function (v) {
            return Data_Function.apply(Text_Parsing_Parser.ParserT)(function (s) {
                return f(v(s));
            });
        };
    };
};
var unBase = function (dictFoldable) {
    return function (b) {
        var f = function (n) {
            return function (e) {
                return (n * b | 0) + e | 0;
            };
        };
        return Data_Foldable.foldl(dictFoldable)(f)(0);
    };
};
var revAp = function (dictApply) {
    return function (a) {
        return function (b) {
            return Control_Apply.apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(function (x) {
                return function (f) {
                    return f(x);
                };
            })(a))(b);
        };
    };
};
var regs = [ "AL", "BL", "CL", "DL" ];
var nops = [ "RET", "IRET", "PUSHF", "POPF", "CLO", "HALT", "NOP", "STI", "CLI", "END" ];
var binops = [ "ADD", "SUB", "MUL", "DIV", "MOD", "AND", "OR", "XOR", "CMP", "MOV" ];
var names = Data_Semigroup.append(Data_Semigroup.semigroupArray)(binops)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(unops)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(nops)(regs)));
var samph = function (dictMonad) {
    return {
        commentStart: "", 
        commentEnd: "", 
        commentLine: ";", 
        nestedComments: true, 
        identStart: Text_Parsing_Parser_Token.letter(dictMonad), 
        identLetter: Text_Parsing_Parser_Token.alphaNum(dictMonad), 
        opStart: Text_Parsing_Parser_Token.letter(dictMonad), 
        opLetter: Text_Parsing_Parser_Token.letter(dictMonad), 
        reservedNames: names, 
        reservedOpNames: names, 
        caseSensitive: false
    };
};
var tokenParser = function (dictMonad) {
    return Text_Parsing_Parser_Token.makeTokenParser(dictMonad)(samph(dictMonad));
};
var brackets = function (dictMonad) {
    return (tokenParser(dictMonad)).brackets;
};
var colon = function (dictMonad) {
    return (tokenParser(dictMonad)).colon;
};
var comma = function (dictMonad) {
    return (tokenParser(dictMonad)).comma;
};
var ident = function (dictMonad) {
    return (tokenParser(dictMonad)).identifier;
};
var ident$prime = function (dictMonad) {
    return Text_Parsing_Parser_Combinators["try"](((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(ident(dictMonad))(Text_Parsing_Parser_Combinators.notFollowedBy(dictMonad)(colon(dictMonad))));
};
var labelDecl = function (dictMonad) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(ident(dictMonad))("label"))(function (v) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(colon(dictMonad))(function () {
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v);
        });
    });
};
var logLabel = function (i) {
    return function (m) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_Eff.monadEff))(labelDecl(Control_Monad_Eff.monadEff))(function (v) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_Eff.monadEff))(Control_Monad_Trans.lift(Text_Parsing_Parser.monadTransParserT)(Control_Monad_Eff.monadEff)(Data_StrMap_ST.peek(m)(v)))(function (v1) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_Eff.monadEff))(Control_Applicative.when(Text_Parsing_Parser.applicativeParserT(Control_Monad_Eff.monadEff))(Data_Maybe.isJust(v1))(Text_Parsing_Parser.fail(Control_Monad_Eff.monadEff)("Repeated label: " + v)))(function () {
                    return Control_Monad_Trans.lift(Text_Parsing_Parser.monadTransParserT)(Control_Monad_Eff.monadEff)(function __do() {
                        var v2 = Control_Monad_ST.readSTRef(i)();
                        return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_StrMap_ST.poke(m)(v)(v2))();
                    });
                });
            });
        });
    };
};
var lex = function (dictMonad) {
    return (tokenParser(dictMonad)).lexeme;
};
var hex = function (dictMonad) {
    var hexDigs = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String.anyChar(dictMonad))(function (v) {
        return Data_Maybe.maybe(Text_Parsing_Parser.fail(dictMonad)("Expected a hex digit"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(Data_Char_Unicode.digitToInt(v));
    });
    return lex(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(unBase(Data_Foldable.foldableArray)(16))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_Combinators["try"](((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(hexDigs))))("a hex number"));
};
var lit = function (dictMonad) {
    return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(hex(dictMonad))(function (v) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Applicative.when(Text_Parsing_Parser.applicativeParserT(dictMonad))(v > 255)(Text_Parsing_Parser.fail(dictMonad)("Only numbers up to 255 supported")))(function () {
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v);
        });
    }))("a hex literal");
};
var op = function (dictMonad) {
    return (tokenParser(dictMonad)).reservedOp;
};
var jmp = function (dictMonad) {
    return function (dictMonadReader) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)([ Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(op(dictMonad)("JMP"))(Samph_Types.C0.create), Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(op(dictMonad)("JZ"))(Samph_Types.C1.create), Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(op(dictMonad)("JNZ"))(Samph_Types.C2.create), Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(op(dictMonad)("JS"))(Samph_Types.C3.create), Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(op(dictMonad)("JNS"))(Samph_Types.C4.create), Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(op(dictMonad)("JO"))(Samph_Types.C5.create), Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(op(dictMonad)("JNO"))(Samph_Types.C6.create) ]))(function (v) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(ident(dictMonad))(function (v1) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_Trans.lift(Text_Parsing_Parser.monadTransParserT)(dictMonad)(Control_Monad_Reader_Class.ask(dictMonadReader)))(function (v2) {
                    var $70 = Data_StrMap.lookup(v1)(v2);
                    if ($70 instanceof Data_Maybe.Nothing) {
                        return Text_Parsing_Parser.fail(dictMonad)("Unrecognised label: " + v1);
                    };
                    if ($70 instanceof Data_Maybe.Just) {
                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v($70.value0));
                    };
                    throw new Error("Failed pattern match at Samph.Pars line 247, column 3 - line 249, column 31: " + [ $70.constructor.name ]);
                });
            });
        });
    };
};
var nop = function (dictMonad) {
    return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)(Data_Functor.map(Data_Functor.functorArray)(op(dictMonad))(Data_Maybe.fromMaybe([  ])(Data_Array.init(nops)))))("");
};
var reserved = function (dictMonad) {
    return (tokenParser(dictMonad)).reserved;
};
var misc = function (dictMonad) {
    return Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)([ Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(reserved(dictMonad)("HALT"))(Samph_Types.O0.value), Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(reserved(dictMonad)("CLO"))(Samph_Types.FE.value), Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(reserved(dictMonad)("NOP"))(Samph_Types.FF.value), Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(reserved(dictMonad)("STI"))(Samph_Types.FC.value), Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(reserved(dictMonad)("CLI"))(Samph_Types.FD.value), Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(reserved(dictMonad)("RET"))(Samph_Types.CB.value), Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(reserved(dictMonad)("IRET"))(Samph_Types.CD.value), Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(reserved(dictMonad)("PUSHF"))(Samph_Types.EA.value), Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(reserved(dictMonad)("POPF"))(Samph_Types.EB.value) ]);
};
var reg = function (dictMonad) {
    return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)([ Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(reserved(dictMonad)("AL"))(Samph_Types.AL.value), Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(reserved(dictMonad)("BL"))(Samph_Types.BL.value), Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(reserved(dictMonad)("CL"))(Samph_Types.CL.value), Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(reserved(dictMonad)("DL"))(Samph_Types.DL.value) ]))("a register");
};
var unArith = function (dictMonad) {
    var un$prime = function (n) {
        return function (c) {
            return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(op(dictMonad)(n))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(c)(reg(dictMonad)));
        };
    };
    return Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)([ un$prime("INC")(Samph_Types.A4.create), un$prime("DEC")(Samph_Types.A5.create), un$prime("NOT")(Samph_Types.AD.create), un$prime("ROL")(Samph_Types.A9.create), un$prime("ROR")(Samph_Types.B9.create), un$prime("SHL")(Samph_Types.C9.create), un$prime("SHR")(Samph_Types.D9.create), un$prime("PUSH")(Samph_Types.E0.create), un$prime("POP")(Samph_Types.E1.create) ]);
};
var wSpace = function (dictMonad) {
    return (tokenParser(dictMonad)).whiteSpace;
};
var binArith = function (dictMonad) {
    var arith$prime = function (n) {
        return function (a) {
            return function (b) {
                return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(op(dictMonad)(n))(revAp(Text_Parsing_Parser.applyParserT(dictMonad))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(reg(dictMonad))(comma(dictMonad)))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Data_Function.flip(a))(reg(dictMonad)))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(function (y) {
                    return function (x) {
                        return b(x)(y);
                    };
                })(lit(dictMonad)))));
            };
        };
    };
    return Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)([ arith$prime("ADD")(Samph_Types.A0.create)(Samph_Types.B0.create), arith$prime("SUB")(Samph_Types.A1.create)(Samph_Types.B1.create), arith$prime("MUL")(Samph_Types.A2.create)(Samph_Types.B2.create), arith$prime("DIV")(Samph_Types.A3.create)(Samph_Types.B3.create), arith$prime("MOD")(Samph_Types.A6.create)(Samph_Types.B6.create), arith$prime("AND")(Samph_Types.AA.create)(Samph_Types.BA.create), arith$prime("OR")(Samph_Types.AB.create)(Samph_Types.BB.create), arith$prime("XOR")(Samph_Types.AC.create)(Samph_Types.BC.create) ]);
};
var addrReg = function (dictMonad) {
    return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(brackets(dictMonad)(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Samph_Types.AddrReg)(reg(dictMonad))))("An address in a register");
};
var addrLit = function (dictMonad) {
    return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(brackets(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(lit(dictMonad))(function (v) {
        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v);
    })))("An address literal");
};
var arg = function (dictMonad) {
    return Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)([ Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Data_Show.show(Samph_Types.showAddrReg))(Text_Parsing_Parser_Combinators["try"](((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(addrReg(dictMonad))), Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Data_Show.show(Samph_Types.showAddrLit))(Text_Parsing_Parser_Combinators["try"](((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(addrLit(dictMonad))), Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Data_Show.show(Samph_Types.showReg))(reg(dictMonad)), Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Data_Show.show(Samph_Types.showLit))(lit(dictMonad)) ]);
};
var binop = function (dictMonad) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)(Data_Functor.map(Data_Functor.functorArray)(op(dictMonad))(binops)))(function (v) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(ident$prime(dictMonad))(arg(dictMonad)))(function (v1) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(comma(dictMonad))(function () {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(ident$prime(dictMonad))(arg(dictMonad)))(function (v2) {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1 + (" " + v2));
                });
            });
        });
    });
};
var unop = function (dictMonad) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)(Data_Functor.map(Data_Functor.functorArray)(op(dictMonad))(unops)))(function (v) {
        return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(ident$prime(dictMonad))(arg(dictMonad));
    });
};
var firstPass = function (dictMonad) {
    var instr = function (i) {
        var globInc = function (n) {
            return Control_Monad_Trans.lift(Text_Parsing_Parser.monadTransParserT)(Control_Monad_Eff.monadEff)(Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_ST.modifySTRef(i)(function (v) {
                return v + n | 0;
            })));
        };
        return Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_Eff.monadEff))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_Eff.monadEff))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Control_Monad_Eff.monadEff))(binop(Control_Monad_Eff.monadEff))(globInc(3)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Control_Monad_Eff.monadEff))(unop(Control_Monad_Eff.monadEff))(globInc(2))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Control_Monad_Eff.monadEff))(nop(Control_Monad_Eff.monadEff))(globInc(1)));
    };
    var firstPass$prime = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_Eff.monadEff))(Control_Monad_Trans.lift(Text_Parsing_Parser.monadTransParserT)(Control_Monad_Eff.monadEff)(Data_StrMap_ST["new"]))(function (v) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_Eff.monadEff))(Control_Monad_Trans.lift(Text_Parsing_Parser.monadTransParserT)(Control_Monad_Eff.monadEff)(Control_Monad_ST.newSTRef(0)))(function (v1) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_Eff.monadEff))(Text_Parsing_Parser_Combinators.skipMany(Control_Monad_Eff.monadEff)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Control_Monad_Eff.monadEff))(instr(v1))(logLabel(v1)(v))))(function () {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Control_Monad_Eff.monadEff))(reserved(Control_Monad_Eff.monadEff)("END"))(function () {
                    return Control_Monad_Trans.lift(Text_Parsing_Parser.monadTransParserT)(Control_Monad_Eff.monadEff)(Data_StrMap.freezeST(v));
                });
            });
        });
    });
    var p = function (s) {
        return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Control_Monad_Eff.runPure(Text_Parsing_Parser.unParserT(firstPass$prime)(s)));
    };
    return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(wSpace(dictMonad))(p);
};
var instruction = function (dictMonad) {
    return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(binop(dictMonad))(unop(dictMonad)))(nop(dictMonad));
};
var cmp = function (dictMonad) {
    return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(op(dictMonad)("CMP"))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(reg(dictMonad))(comma(dictMonad)))(function (v) {
        return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Samph_Types.DA.create(v))(reg(dictMonad)))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Samph_Types.DB.create(v))(lit(dictMonad))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Samph_Types.DC.create(v))(addrLit(dictMonad)));
    }));
};
var mov = function (dictMonad) {
    var d4 = Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Samph_Types.D4.create)(addrReg(dictMonad));
    var d3 = function (r) {
        return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Samph_Types.D3.create(r))(addrReg(dictMonad));
    };
    var d2 = Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Samph_Types.D2.create)(addrLit(dictMonad));
    var othOpts = Control_Apply.apply(Text_Parsing_Parser.applyParserT(dictMonad))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(d4)(d2))(comma(dictMonad)))(reg(dictMonad));
    var d1 = function (r) {
        return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Samph_Types.D1.create(r))(addrLit(dictMonad));
    };
    var d0 = function (r) {
        return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Samph_Types.D0.create(r))(lit(dictMonad));
    };
    var regOpts = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(reg(dictMonad))(comma(dictMonad)))(function (v) {
        return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(d0(v))(d3(v)))(d1(v));
    });
    return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(op(dictMonad)("MOV"))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(regOpts)(othOpts));
};
var instructions$prime = function (dictMonad) {
    return function (dictMonadReader) {
        return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Data_Maybe.Just.create)(Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)([ misc(dictMonad), mov(dictMonad), cmp(dictMonad), jmp(dictMonad)(dictMonadReader), unArith(dictMonad), binArith(dictMonad) ])))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(labelDecl(dictMonad))(Data_Maybe.Nothing.value));
    };
};
var instructions = function (dictMonad) {
    return function (m) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(unMon(dictMonad)(function (p) {
            return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Control_Monad_Reader.runReader(p)(m));
        })(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Text_Parsing_Parser.lazyParserT)(instructions$prime(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))(Control_Monad_Reader_Trans.monadReaderReaderT(Data_Identity.monadIdentity)))))(function (v) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(reserved(dictMonad)("END"))(function () {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Array.catMaybes(v));
            });
        });
    };
};
var program = function (dictMonad) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(wSpace(dictMonad))(function () {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.lookAhead(dictMonad)(firstPass(dictMonad)))(function (v) {
            return instructions(dictMonad)(v);
        });
    });
};
module.exports = {
    addrLit: addrLit, 
    addrReg: addrReg, 
    arg: arg, 
    binArith: binArith, 
    binop: binop, 
    binops: binops, 
    brackets: brackets, 
    cmp: cmp, 
    colon: colon, 
    comma: comma, 
    firstPass: firstPass, 
    hex: hex, 
    ident: ident, 
    "ident'": ident$prime, 
    instruction: instruction, 
    instructions: instructions, 
    "instructions'": instructions$prime, 
    jmp: jmp, 
    labelDecl: labelDecl, 
    lex: lex, 
    lit: lit, 
    logLabel: logLabel, 
    misc: misc, 
    mov: mov, 
    names: names, 
    nop: nop, 
    nops: nops, 
    op: op, 
    program: program, 
    reg: reg, 
    regs: regs, 
    reserved: reserved, 
    revAp: revAp, 
    samph: samph, 
    tokenParser: tokenParser, 
    unArith: unArith, 
    unBase: unBase, 
    unMon: unMon, 
    unop: unop, 
    unops: unops, 
    wSpace: wSpace
};
